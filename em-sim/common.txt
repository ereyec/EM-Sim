struct simulationParams{
	//dimensions
	int x;
	int y;
	int z;

	float dx;
	float dy;
	float dz;
	float dt;
};

struct physicalConstants{
	float e0 = 8.854e-12;
	float u0 = 12.56e-7;
	float o0 = 0;
	float c = 299792458;
};

struct Ex{
	float current;
	float last;
	float invPermittivity;
	float conductivity;
};
struct Ey{
	float current;
	float last;
	float invPermittivity;
	float conductivity;
};
struct Ez{
	float current;
	float last;
	float invPermittivity;
	float conductivity;
};
struct Hx{
	float current;
	float last;
	float permeability;
};
struct Hy{
	float current;
	float last;
	float permeability;
};
struct Hz{
	float current;
	float last;
	float permeability;
};

struct YeeTrihedralCell{
	glm:ivec3 pivot;
	Ex ex;
	Ey ey;
	Ez ez;
	Hx hx;
	Hy hy;
	Hz hz;
};

//not sure how to apply PML yet so I'll just experiment with this:
void setBoundaryCell(YeeTrihedralCell& ytc){
	ytc.pivot = glm::ivec3(0,0,0);

	ytc.ex.current = 0;
	ytc.ex.last = 0;
	ytc.ex.invPermittivity = 1/pc.e0;
	ytc.ex.conductivity = pc.o0;

	ytc.ey.current = 0;
	ytc.ey.last = 0;
	ytc.ey.invPermittivity = 1/pc.e0;
	ytc.ey.conductivity = pc.o0;

	ytc.ez.current = 0;
	ytc.ez.last = 0;
	ytc.ez.invPermittivity = 1/pc.e0;
	ytc.ez.conductivity = pc.o0;

	ytc.hx.current = 0;
	ytc.hx.last = 0;
	ytc.hx.permeability = pc.u0;

	ytc.hy.current = 0;
	ytc.hy.last = 0;
	ytc.hy.permeability = pc.u0;

	ytc.hz.current = 0;
	ytc.hz.last = 0;
	ytc.hz.permeability = pc.u0;
}

class YeeGrid{
public:
	std::vector<YeeTrihedralCell> grid; //to be intitialized 

	YeeGrid(){}
	YeeGrid(simulationParams& sp){
		grid.resize(sp.x*sp.y*sp.z);

		//initialize all grid components:
		YeeTrihedralCell ytc;
		setBoundaryCell(ytc);
		for(int i = 0; i < grid.size(); i++) grid[i] = ytc;
		
	}

	YeeTrihedralCell& operator()(unsigned int x, unsigned int y, unsigned int z){
		bool withinBounds = x >= 0 || x < sp.x || y >= 0 || y < sp.y || z >= 0 || z < spz.;
		if(withinBounds) return grid[sp.z*z + sp.x*x + y];
		else{
			YeeTrihedralCell ytc;
			setBoundaryCell(ytc);
			return ytc;
		}
	}
};

struct materialCell{
	float permittivity;
	float conductivity;
	float permeability;
	bool empty;
};

class MaterialGrid{
public:
	std::vector<materialCell> grid;		
	
};

struct materialSelection{
	inline static float e;
	inline static float o;
	inline static float u;
	inline static bool eraser;
};

class simulationState{
public:
	int step;
	float time;
	YeeGrid yeeGrid;
	MaterialGrid materialGrid;
	materialSelection materialselec;

	simulationState(simulationParams& sp){
		yeeGrid = YeeGrid(sp);
	}
};

void pushV3T2(std::vector<float>& vertices, glm::vec3 vec, glm::vec2 tex){
	vertices.push_back(vec.x);
        vertices.push_back(vec.y);
        vertices.push_back(vec.z);
        vertices.push_back(tex.x);
        vertices.push_back(tex.y);
}

