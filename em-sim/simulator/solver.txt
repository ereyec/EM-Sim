#ifndef SOLVER_H
#define SOLVER_H

//FDTD
void updateEComponents(simulationParams& sp, simulationState& ss){
	float dHx, dHy, dHz;

	dHz = yeeGrid(x,y,z).Hz.current - yeeGrid(x,y-1,z).Hz.current;
	dHy = yeeGrid(x,y,z-1).Hy.current - yeeGrid(x,y,z).Hy.current;

	yeeGrid(x,y,z).Ex.current = yeeGrid(x,y,z).Ex.last + yeeGrid(x,y,z).Ex.invPermittivity
	*((sp.dt/sp.dy)*(dHz) - (sp.dt/sp.dz)*(dHy) - yeeGrid(x,y,z)*Ex.conductivity*yeeGrid(x,y,z).Ex.last);

	//Ey - high risk of copy-paste errors after this point
	dHx = yeeGrid().Hx.current - yeeGrid().Hx.current;
	dHz = yeeGrid().Hz.current - yeeGrid().Hy.current;

	yeeGrid(x,y,z).Ey.current = yeeGrid(x,y,z).Ey.last + yeeGrid(x,y,z).Ey.invPermittivity
	*( (sp.dt/sp.dz)*(dHx) - (sp.dt/sp.dx)*(dHz) - yeeGrid(x,y,z).Ey.conductivity*yeeGrid(x,y,z).Ey.last);

	//Ez
	dHy = yeeGrid().Hy.current - yeeGrid().Hy.current;
	dHx = yeeGrid().Hx.current - yeeGrid().Hx.current;

	yeeGrid(x,y,z).Ez.current = yeeGrid(x,y,z).Ez.last + yeeGrid(x,y,z).Ez.invPermittivity
	*( (sp.dt/sp.dx)*(dHy) - (sp.dt/sp.dy)*(dHx) - yeeGrid(x,y,z).Ez.conductivity.yeeGrid(x,y,z).Ez.last);
}

void updateHComponents(simulationParams& sp, simulationState& ss){
	//Hx
	float dEx, dEy, dEz;

	dEy = yeeGrid().Ey.current - yeeGrid().Ey.current;
	dEz = yeeGrid().Ez.current - yeeGrid().Ez.current;

	yeeGrid(x,y,z).Hx.current = yeeGrid(x,y,z).Hx.last + (1/yeeGrid(x,y,z).Hx.permeability)
	*( (sp.dt/sp.dz)*dEy - (sp.dt/sp.dy)*dEz );

	//Hy
	dEz = yeeGrid().Ez.current - yeeGrid().Ez.current;
	dEx = yeeGrid().Ex.current - yeeGrid().Ex.current;

	yeeGrid(x,y,z).Hy.current = yeeGrid(x,y,z).Hy.last + (1/yeeGrid(x,y,z).Hy.permeability)
	*( (sp.dt/sp.dx)*dEz - (sp.dt/sp.dz)*dEx);

	//Hz
	dEx = yeeGrid().Ex.current - yeeGrid().Ex.current;
	dEy = yeeGrid().Ey.current - yeeGrid().Ey.current;

	yeeGrid(x,y,z).Hz.current = yeeGrid(x,y,z).Hz.last + (1/yeeGrid(x,y,z).Hz.permeability)
	*( (sp.dt/sp.dy)*dEx - (sp.dt/sp.dx)*dEy);
}


void solveSingleIteration(simulationParams& sp, simulationState& ss){
//iterate through all grid components
for(int z = 0; z < sp.z; z++){
for(int x = 0; x < sp.x; x++){
for(int y = 0; y < sp.y; y++){
	//hard sourcing a wave
	float Emax = 100.f;
	float omega = 1.884e10;
	float E = Emax*std::cos(omega * ss.time);
	ss.yeeGrid(2,0,2).Ex.current = E; //do we only need Ex? What will happen if we set Ez?
	
	//Leapfrog mechanism:
	if(ss.step%2 == 0){ //electric components
		updateEComponents(sp, ss);
	}
	else{ //magnetic components
		updateHComponents(sp, ss);
	}

	//write to file
	saveSimOutputEx(sp, ss);	

	if(ss.step > 5) break; //want only a few steps first time running
	ss.step++;
}}}

}

#endif